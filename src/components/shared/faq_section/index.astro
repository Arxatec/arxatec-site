---
interface FAQ {
  question: string;
  answer: string;
}

interface Props {
  title?: string;
  description?: string;
  faqs: FAQ[];
}

const {
  title = "Preguntas frecuentes",
  description,
  faqs,
} = Astro.props as Props;
---

<section class="py-24 sm:py-32 bg-neutral-50">
  <div class="mx-auto max-w-7xl px-6 lg:px-8">
    <div
      class="bg-gradient-to-br from-neutral-200 via-neutral-100 to-neutral-200 rounded-3xl p-6 sm:p-8 lg:p-12"
    >
      <div class="mb-12 sm:mb-16">
        <h2
          class="text-4xl font-bold font-serif tracking-tight text-neutral-900 sm:text-5xl mb-4 sm:mb-6"
        >
          {title}
        </h2>
        {
          description && (
            <p class="text-lg text-neutral-600 leading-relaxed max-w-2xl">
              {description}
            </p>
          )
        }
      </div>

      <dl class="divide-y divide-neutral-300/70">
        {
          faqs.map((faq, index) => (
            <div class="faq-item py-6 first:pt-0">
              <dt>
                <button
                  class="faq-button group flex w-full items-start justify-between text-left focus:outline-none py-2"
                  aria-expanded="false"
                  data-faq-index={index}
                >
                  <span class="text-lg sm:text-xl font-serif text-neutral-900 pr-8">
                    {faq.question}
                  </span>
                  <span class="ml-auto flex-shrink-0 flex items-center justify-center">
                    <svg
                      class="faq-plus-icon h-6 w-6 text-neutral-900 transition-transform duration-300 ease-out group-hover:scale-110"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke-width="2"
                      stroke="currentColor"
                      aria-hidden="true"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M12 4.5v15m7.5-7.5h-15"
                      />
                    </svg>
                    <svg
                      class="faq-minus-icon h-6 w-6 text-neutral-900 transition-transform duration-300 ease-out hidden group-hover:scale-110"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke-width="2"
                      stroke="currentColor"
                      aria-hidden="true"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M19.5 12h-15"
                      />
                    </svg>
                  </span>
                </button>
              </dt>
              <dd class="faq-panel overflow-hidden transition-all duration-300 ease-out max-h-0">
                <div class="pt-4 pr-12">
                  <p class="text-base leading-7 text-neutral-600">
                    {faq.answer}
                  </p>
                </div>
              </dd>
            </div>
          ))
        }
      </dl>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const faqButtons = document.querySelectorAll(".faq-button");

      faqButtons.forEach((button) => {
        button.addEventListener("click", function (this: HTMLButtonElement) {
          const faqItem = this.closest(".faq-item");
          if (!faqItem) return;

          const panel = faqItem.querySelector(".faq-panel") as HTMLElement;
          const plusIcon = faqItem.querySelector(".faq-plus-icon");
          const minusIcon = faqItem.querySelector(".faq-minus-icon");

          if (!panel || !plusIcon || !minusIcon) return;

          const isExpanded = this.getAttribute("aria-expanded") === "true";

          faqButtons.forEach((otherButton) => {
            if (otherButton !== this) {
              const otherFaqItem = otherButton.closest(".faq-item");
              if (!otherFaqItem) return;

              const otherPanel = otherFaqItem.querySelector(
                ".faq-panel"
              ) as HTMLElement;
              const otherPlusIcon =
                otherFaqItem.querySelector(".faq-plus-icon");
              const otherMinusIcon =
                otherFaqItem.querySelector(".faq-minus-icon");

              if (!otherPanel || !otherPlusIcon || !otherMinusIcon) return;

              otherButton.setAttribute("aria-expanded", "false");
              otherPanel.style.maxHeight = "0px";
              otherPlusIcon.classList.remove("hidden");
              otherMinusIcon.classList.add("hidden");
            }
          });

          if (isExpanded) {
            this.setAttribute("aria-expanded", "false");
            panel.style.maxHeight = "0px";
            plusIcon.classList.remove("hidden");
            minusIcon.classList.add("hidden");
          } else {
            this.setAttribute("aria-expanded", "true");
            panel.style.maxHeight = panel.scrollHeight + "px";
            plusIcon.classList.add("hidden");
            minusIcon.classList.remove("hidden");
          }
        });
      });
    });
  </script>
</section>
